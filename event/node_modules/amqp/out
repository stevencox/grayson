got ready event
SYSCALL(args) 		 = return
getpid(0x7FFF5FBFEE40, 0x7FFFFFE00050, 0x0)		 = 16929 0
open_nocancel("/dev/urandom\0", 0x0, 0x0)		 = 4 0
read_nocancel(0x4, "\303\020\204\316tc9\255\255P\376\261\020\375\035\263a\206U7\231\025\344\232Oi\310%K\025\370\022i\230\214v\335\021\330\214\327Kn\333\331\n\373\035\330\035/\201\023\314\316\273X\325\301\017\315\342\376%\320\220@ec\b_\313\231+\373\036\311\025~,M\324O\337k\305\373\t%\2111&\332\n\300\243\311\270\360g\275\262\222\304\022\"\260t\0", 0x6C)		 = 108 0
close_nocancel(0x4)		 = 0 0
issetugid(0x100000000, 0x7FFF5FBFF188, 0x7FFF5FC40530)		 = 0 0
geteuid(0x100000000, 0x7FFF5FBFF188, 0x0)		 = 0 0
__sysctl(0x7FFF5FBFCD30, 0x2, 0x7FFF5FBFCCF0)		 = 0 0
__sysctl(0x7FFF5FBFCCF0, 0x2, 0x7FFF5FBFCD8C)		 = 0 0
shared_region_check_np(0x7FFF5FBFCEF8, 0x0, 0x7FFF5FC1DC86)		 = 0 0
stat64("/usr/lib/dtrace/libdtrace_dyld.dylib\0", 0x7FFF5FBFC300, 0x7FFF5FBFC940)		 = 0 0
open("/usr/lib/dtrace/libdtrace_dyld.dylib\0", 0x0, 0x0)		 = 4 0
pread(0x4, "\312\376\272\276\0", 0x1000, 0x0)		 = 4096 0
pread(0x4, "\317\372\355\376\a\0", 0x1000, 0x1000)		 = 4096 0
mmap(0x10047F000, 0x2000, 0x5, 0x12, 0x4, 0x7FFF00000001)		 = 0x47F000 0
mmap(0x100481000, 0x1000, 0x3, 0x12, 0x4, 0x7FFF00000001)		 = 0x481000 0
mmap(0x100482000, 0x1F10, 0x1, 0x12, 0x4, 0x7FFF00000001)		 = 0x482000 0
close(0x4)		 = 0 0
stat64("/opt/local/lib/libssl.0.9.8.dylib\0", 0x7FFF5FBFC050, 0x7FFF5FBFC690)		 = 0 0
open("/opt/local/lib/libssl.0.9.8.dylib\0", 0x0, 0x0)		 = 4 0
pread(0x4, "\317\372\355\376\a\0", 0x1000, 0x0)		 = 4096 0
mmap(0x100484000, 0x42000, 0x5, 0x12, 0x4, 0x7FFF00000001)		 = 0x484000 0
mmap(0x1004C6000, 0x6000, 0x3, 0x12, 0x4, 0x7FFF00000001)		 = 0x4C6000 0
mmap(0x1004CC000, 0xCBB8, 0x1, 0x12, 0x4, 0x7FFF00000001)		 = 0x4CC000 0
fcntl(0x4, 0x2C, 0x7FFF5FBFA350)		 = 0 0
close(0x4)		 = 0 0
stat64("/opt/local/lib/libcrypto.0.9.8.dylib\0", 0x7FFF5FBFC050, 0x7FFF5FBFC690)		 = 0 0
open("/opt/local/lib/libcrypto.0.9.8.dylib\0", 0x0, 0x0)		 = 4 0
pread(0x4, "\317\372\355\376\a\0", 0x1000, 0x0)		 = 4096 0
mmap(0x1004D9000, 0x114000, 0x5, 0x12, 0x4, 0x7FFF00000001)		 = 0x4D9000 0
mmap(0x1005ED000, 0x25000, 0x3, 0x12, 0x4, 0x7FFF00000001)		 = 0x5ED000 0
mmap(0x100614000, 0x3B008, 0x1, 0x12, 0x4, 0x7FFF00000001)		 = 0x614000 0
fcntl(0x4, 0x2C, 0x7FFF5FBFA340)		 = 0 0
madvise(0x100614000, 0x2000, 0x2)		 = 0 0
close(0x4)		 = 0 0
stat64("/opt/local/lib/libz.1.dylib\0", 0x7FFF5FBFC050, 0x7FFF5FBFC690)		 = 0 0
open("/opt/local/lib/libz.1.dylib\0", 0x0, 0x0)		 = 4 0
pread(0x4, "\317\372\355\376\a\0", 0x1000, 0x0)		 = 4096 0
mmap(0x100650000, 0x15000, 0x5, 0x12, 0x4, 0x7FFF00000001)		 = 0x650000 0
mmap(0x100665000, 0x1000, 0x3, 0x12, 0x4, 0x7FFF00000001)		 = 0x665000 0
mmap(0x100666000, 0x1818, 0x1, 0x12, 0x4, 0x7FFF00000001)		 = 0x666000 0
fcntl(0x4, 0x2C, 0x7FFF5FBFA420)		 = 0 0
close(0x4)		 = 0 0
stat64("/usr/lib/libSystem.B.dylib\0", 0x7FFF5FBFC050, 0x7FFF5FBFC690)		 = 0 0
stat64("/usr/lib/libstdc++.6.dylib\0", 0x7FFF5FBFC050, 0x7FFF5FBFC690)		 = 0 0
stat64("/usr/lib/system/libmathCommon.A.dylib\0", 0x7FFF5FBFBAD0, 0x7FFF5FBFC110)		 = 0 0
ioctl(0x4, 0x80086804, 0x7FFF5FBFCC90)		 = 0 0
close(0x4)		 = 0 0
__sysctl(0x7FFF5FBFCB80, 0x2, 0x7FFF5FBFCB70)		 = 0 0
bsdthread_register(0x7FFF83AA875C, 0x7FFF83A89378, 0x2000)		 = 0 0
thread_selfid(0x7FFF83AA875C, 0x7FFF83A89378, 0x0)		 = 1024888 0
open_nocancel("/dev/urandom\0", 0x0, 0x7FFF707CCB20)		 = 4 0
read_nocancel(0x4, "\275\371\032*-\372\201\v5\2779g\351\204\236\177\257\374\034\363\2726\365+\235\277]DR\361\216\001\320;w\022\016\226\377\266)\236X\212^\236\200\206\347v\036\310\223?mOL\325#k\354\207v\376\0", 0x40)		 = 64 0
close_nocancel(0x4)		 = 0 0
mmap(0x0, 0x3000, 0x3, 0x1002, 0x1000000, 0x7FFF00000001)		 = 0x668000 0
__sysctl(0x7FFF5FBFCA00, 0x2, 0x7FFF5FBFC9C0)		 = 0 0
__sysctl(0x7FFF5FBFC9C0, 0x2, 0x7FFF5FBFCA58)		 = 0 0
getpid(0x7FFF5FBFC950, 0x7FFFFFE00050, 0x0)		 = 16929 0
open_nocancel("/dev/urandom\0", 0x0, 0x0)		 = 4 0
read_nocancel(0x4, "\373!k\256Z\020\357g\225\264\005\362-nA\231\376@\222\252\216\0", 0x6C)		 = 108 0
close_nocancel(0x4)		 = 0 0
__sysctl(0x7FFF5FBFCA00, 0x2, 0x7FFF5FBFCA2C)		 = 0 0
mmap(0x0, 0xD000, 0x3, 0x1002, 0x1000000, 0x7FFF00000001)		 = 0x66B000 0
mmap(0x0, 0xD000, 0x3, 0x1002, 0x1000000, 0x7FFF00000001)		 = 0x678000 0
mmap(0x0, 0x1000, 0x3, 0x1002, 0x1000000, 0x7FFF00000001)		 = 0x685000 0
mmap(0x0, 0x200000, 0x3, 0x1002, 0x7000000, 0x7FFF00000001)		 = 0x686000 0
munmap(0x100686000, 0x7A000)		 = 0 0
munmap(0x100800000, 0x86000)		 = 0 0
__sysctl(0x7FFF5FBFCB60, 0x2, 0x7FFF5FBFCB20)		 = 0 0
__sysctl(0x7FFF5FBFCB20, 0x2, 0x7FFF707D9680)		 = 0 0
__sysctl(0x7FFF5FBFCB60, 0x2, 0x7FFF5FBFCB20)		 = 0 0
__sysctl(0x7FFF5FBFCB20, 0x2, 0x7FFF707D9684)		 = 0 0
__sysctl(0x7FFF5FBFCB60, 0x2, 0x7FFF5FBFCB20)		 = 0 0
__sysctl(0x7FFF5FBFCB20, 0x2, 0x7FFF707D9688)		 = 0 0
mmap(0x0, 0x3000, 0x3, 0x1002, 0x1000000, 0x7FFF00000001)		 = 0x686000 0
__sysctl(0x7FFF5FBFCB30, 0x2, 0x7FFF5FBFCAF0)		 = 0 0
__sysctl(0x7FFF5FBFCAF0, 0x2, 0x7FFF5FBFCB88)		 = 0 0
__sysctl(0x7FFF5FBFCB30, 0x2, 0x7FFF5FBFCB5C)		 = 0 0
mmap(0x0, 0xD000, 0x3, 0x1002, 0x1000000, 0x7FFF00000001)		 = 0x689000 0
mmap(0x0, 0xD000, 0x3, 0x1002, 0x1000000, 0x7FFF00000001)		 = 0x696000 0
mmap(0x0, 0x200000, 0x3, 0x1002, 0x7000000, 0x7FFF00000001)		 = 0x800000 0
munmap(0x100900000, 0x100000)		 = 0 0
mmap(0x0, 0x21000, 0x3, 0x1002, 0x3000000, 0x100000001)		 = 0x6CC000 0
madvise(0x1006CC000, 0x21000, 0x9)		 = 0 0
mmap(0x0, 0x41000, 0x3, 0x1002, 0x3000000, 0x100000001)		 = 0xAC4000 0
madvise(0x100AC4000, 0x41000, 0x9)		 = 0 0
madvise(0x1006CC000, 0x21000, 0x9)		 = 0 0
open_nocancel(".\0", 0x0, 0x0)		 = 9 0
fstat64(0x9, 0x7FFF5FBFE2A0, 0x0)		 = 0 0
fcntl_nocancel(0x9, 0x32, 0x7FFF5FBFE4E0)		 = 0 0
close_nocancel(0x9)		 = 0 0
stat64("/Users/ryan/projects/node-amqp\0", 0x7FFF5FBFE210, 0x0)		 = 0 0
mmap(0x105840000, 0x40000, 0x7, 0x1012, 0xFF000000, 0x100000001)		 = 0x5840000 0
mmap(0x0, 0x82000, 0x3, 0x1002, 0x3000000, 0x100000001)		 = 0xB05000 0
mmap(0x105880000, 0x4000, 0x7, 0x1012, 0xFF000000, 0x100000001)		 = 0x5880000 0
madvise(0x100B05000, 0x82000, 0x9)		 = 0 0
madvise(0x100AC4000, 0x41000, 0x9)		 = 0 0
madvise(0x1006CC000, 0x21000, 0x9)		 = 0 0
madvise(0x1006CC000, 0x21000, 0x9)		 = 0 0
open("/Users/ryan/projects/node-amqp/x.js\0", 0x0, 0x1B6)		 = 9 0
read(0x9, "amqp = require('./amqp');\nsys = require('sys');\n\ninspect = sys.inspect;\nputs = sys.puts;\nvar creds = { host:     process.env['AMQP_HOST']      || 'localhost'\n            , login:    process.env['AMQP_LOGIN']     || 'guest'\n            , password: process.e", 0x1000)		 = 638 0
pread(0x9, "amqp = require('./amqp');\nsys = require('sys');\n\ninspect = sys.inspect;\nputs = sys.puts;\nvar creds = { host:     process.env['AMQP_HOST']      || 'localhost'\n            , login:    process.env['AMQP_LOGIN']     || 'guest'\n            , password: process.e", 0x1000, 0x27E)		 = 0 0
close(0x9)		 = 0 0
stat64("/Users/ryan/projects/node-amqp/amqp.js\0", 0x7FFF5FBFE470, 0x100940151)		 = 0 0
open("/Users/ryan/projects/node-amqp/amqp.js\0", 0x0, 0x1B6)		 = 9 0
read(0x9, "var events = require('events'),\n    sys = require('sys'),\n    net = require('net'),\n    protocol = require('./amqp-definitions-0-8'),\n    Buffer = require('buffer').Buffer,\n    Promise = require('./promise').Promise;\n\nfunction mixin () {\n  // copy referenc", 0x1000)		 = 4096 0
pread(0x9, " other functions for parsing the frame-body.\n  debug('execute: ' + data.toString());\n  for (var i = 0; i < data.length; i++) {\n    switch (this.state) {\n      case 'frameHeader':\n        // Here we buffer the frame header. Remember, this is a fully\n       ", 0x1000, 0x1000)		 = 4096 0
pread(0x9, "er.utf8Slice(buffer.read, buffer.read+length);\n  buffer.read += length;\n  return s;\n}\n\n\nfunction parseLongString (buffer) {\n  var length = parseInt(buffer, 4);\n  var s = buffer.slice(buffer.read, buffer.read + length);\n  buffer.read += length;\n  return s;\n", 0x1000, 0x2000)		 = 4096 0
pread(0x9, "nel, classInfo, weight, properties, size);\n  }\n};\n\n\n// Network byte order serialization\n// (NOTE: javascript always uses network byte order for its ints.)\nfunction serializeInt (b, size, int) {\n  if (b.used + size >= b.length) {\n    throw new Error(\"write ", 0x1000, 0x3000)		 = 4096 0
pread(0x9, "     if (param) bitField |= (1 << bitIndex);\n        bitIndex++;\n\n        if (!fields[i+1] || fields[i+1].domain != 'bit') {\n          debug('SET bit field ' + field.name + ' 0x' + bitField.toString(16));\n          buffer[buffer.used++] = bitField;\n       ", 0x1000, 0x4000)		 = 4096 0
pread(0x9, "ngify(args));\n\n  // Channel 0 is the control channel. If not zero then deligate to\n  // one of the channel objects.\n\n  if (channel > 0) {\n    if (!this.channels[channel]) {\n      debug(\"Received message on untracked channel.\");\n      return;\n    }\n    if (", 0x1000, 0x5000)		 = 4096 0
pread(0x9, "  b[b.used++] = 2; // constants.frameHeader\n\n  serializeInt(b, 2, channel);\n\n  var lengthStart = b.used;\n\n  serializeInt(b, 4, 0 /*dummy*/); // length\n\n  var bodyStart = b.used;\n\n  // HEADER'S BODY\n\n  serializeInt(b, 2, classInfo.index);   // class 60 for ", 0x1000, 0x6000)		 = 4096 0
pread(0x9, "me, options);\n  this.channels.push(exchange);\n  this.exchanges[name] = exchange;\n  return exchange;\n};\n\n// Publishes a message to the amq.topic exchange.\nConnection.prototype.publish = function (routingKey, body) {\n  if (!this._defaultExchange) this._defau", 0x1000, 0x7000)		 = 4096 0
pread(0x9, "icQos,\n          { ticket: 0\n          , prefetchSize: 0\n          , prefetchCount: 1\n          , global: false\n          });\n    });\n  }\n\n  // basic consume\n  var rawOptions = { noAck: !options.ack };\n  return this.subscribeRaw(rawOptions, function (m) {\n", 0x1000, 0x8000)		 = 4096 0
pread(0x9, "annel, classInfo, weight, properties, size) {\n  mixin(this.currentMessage, properties);\n  this.currentMessage.read = 0;\n  this.currentMessage.size = size;\n\n  this.emit('rawMessage', this.currentMessage);\n};\n\n\nQueue.prototype._onContent = function (channel,", 0x1000, 0x9000)		 = 3740 0
pread(0x9, "annel, classInfo, weight, properties, size) {\n  mixin(this.currentMessage, properties);\n  this.currentMessage.read = 0;\n  this.currentMessage.size = size;\n\n  this.emit('rawMessage', this.currentMessage);\n};\n\n\nQueue.prototype._onContent = function (channel,", 0x1000, 0x9E9C)		 = 0 0
close(0x9)		 = 0 0
mmap(0x105884000, 0x4000, 0x7, 0x1012, 0xFF000000, 0x100000001)		 = 0x5884000 0
mmap(0x105888000, 0x40000, 0x7, 0x1012, 0xFF000000, 0x100000001)		 = 0x5888000 0
mmap(0x1058C8000, 0x4000, 0x7, 0x1012, 0xFF000000, 0x100000001)		 = 0x58C8000 0
madvise(0x100B05000, 0x82000, 0x9)		 = 0 0
madvise(0x100AC4000, 0x41000, 0x9)		 = 0 0
madvise(0x1006CC000, 0x21000, 0x9)		 = 0 0
mmap(0x1058CC000, 0x4000, 0x7, 0x1012, 0xFF000000, 0x100000001)		 = 0x58CC000 0
mmap(0x1058D0000, 0x4000, 0x7, 0x1012, 0xFF000000, 0x100000001)		 = 0x58D0000 0
mmap(0x1058D4000, 0x6000, 0x7, 0x1012, 0xFF000000, 0x100000001)		 = 0x58D4000 0
madvise(0x100B05000, 0x82000, 0x9)		 = 0 0
madvise(0x100AC4000, 0x41000, 0x9)		 = 0 0
madvise(0x1006CC000, 0x21000, 0x9)		 = 0 0
madvise(0x1006CC000, 0x21000, 0x9)		 = 0 0
getrlimit(0x1008, 0x7FFF5FBFDCE0, 0x7FFF83A72CCC)		 = 0 0
open_nocancel("/etc/resolv.conf\0", 0x0, 0x1B6)		 = 9 0
fstat64(0x9, 0x7FFF5FBFDC70, 0x7FFF5FBFDD3C)		 = 0 0
read_nocancel(0x9, "#\n# Mac OS X Notice\n#\n# This file is not used by the host name and address resolution\n# or the DNS query routing mechanisms used by most processes on\n# this Mac OS X system.\n#\n# This file is automatically generated.\n#\ndomain joyent.local\nnameserver 8.8.8.8", 0x1000)		 = 276 0
read_nocancel(0x9, "\0", 0x1000)		 = 0 0
close_nocancel(0x9)		 = 0 0
open_nocancel("/etc/nsswitch.conf\0", 0x0, 0x1B6)		 = -1 Err#2
open_nocancel("/etc/host.conf\0", 0x0, 0x1B6)		 = -1 Err#2
open_nocancel("/etc/svc.conf\0", 0x0, 0x1B6)		 = -1 Err#2
open_nocancel("/dev/urandom\0", 0x0, 0x1B6)		 = 9 0
fstat64(0x9, 0x7FFF5FBFDCB0, 0x7FFF5FBFDD7C)		 = 0 0
ioctl(0x9, 0x4004667A, 0x7FFF5FBFDCFC)		 = 0 0
read_nocancel(0x9, "\327\376\214\307\235\361\336\357\006\234\315\331\204v\323\016'\326\303\266',\177\036\226\356\343\316\3169\210\274DD\333\322\271+1ix\254\337\312~\231\207B\214\327>\305C8Vr^\362\352QD\035\247\027\346?\205:\032\200\263\326\222D\324\217\352\202\033\343\213.\240\316\005\223d\216\365Q\t\037HQ\323\354\240u\027\345\262L\227\177\221&S\"\302\3506?\023*W\206*\355\3530\240\213\226\032\2404\026Q\020\374\177\376\260@\241\347\032V\304h\0", 0x10000)		 = 65536 0
close_nocancel(0x9)		 = 0 0
mmap(0x0, 0x40000, 0x3, 0x1002, 0xFF000000, 0x100000001)		 = 0xB87000 0
mmap(0x0, 0x4000, 0x3, 0x1002, 0xFF000000, 0x100000001)		 = 0x6ED000 0
mmap(0x0, 0x7000, 0x3, 0x1002, 0xFF000000, 0x100000001)		 = 0x6F1000 0
mmap(0x0, 0x8000, 0x3, 0x1002, 0xFF000000, 0x100000001)		 = 0x6F8000 0
mmap(0x0, 0x4000, 0x3, 0x1002, 0xFF000000, 0x100000001)		 = 0xBC7000 0
mmap(0x0, 0x4000, 0x3, 0x1002, 0xFF000000, 0x100000001)		 = 0xBCB000 0
mmap(0x0, 0x4000, 0x3, 0x1002, 0xFF000000, 0x100000001)		 = 0xBCF000 0
mmap(0x0, 0x7000, 0x3, 0x1002, 0xFF000000, 0x100000001)		 = 0xBD3000 0
mmap(0x0, 0x7000, 0x3, 0x1002, 0xFF000000, 0x100000001)		 = 0xBDA000 0
mmap(0x0, 0x41000, 0x3, 0x1002, 0xFF000000, 0x100000001)		 = 0xBE1000 0
stat64("/Users/ryan/projects/node-amqp/amqp-definitions-0-8.js\0", 0x7FFF5FBFE210, 0x100940151)		 = 0 0
open("/Users/ryan/projects/node-amqp/amqp-definitions-0-8.js\0", 0x0, 0x1B6)		 = 9 0
read(0x9, "exports.constants = [[1,\"frameMethod\"],[2,\"frameHeader\"],[3,\"frameBody\"],[4,\"frameOobMethod\"],[5,\"frameOobHeader\"],[6,\"frameOobBody\"],[7,\"frameTrace\"],[8,\"frameHeartbeat\"],[200,\"replySuccess\"],[206,\"frameEnd\"],[310,\"notDelivered\"],[311,\"contentTooLarge\"],[", 0x1000)		 = 4096 0
pread(0x9, "it\"},{\"name\":\"durable\",\"domain\":\"bit\"},{\"name\":\"exclusive\",\"domain\":\"bit\"},{\"name\":\"autoDelete\",\"domain\":\"bit\"},{\"name\":\"nowait\",\"domain\":\"bit\"},{\"name\":\"arguments\",\"domain\":\"table\"}]},{\"name\":\"declareOk\",\"index\":11,\"fields\":[{\"name\":\"queue\",\"domain\":\"shor", 0x1000, 0x1000)		 = 4096 0
pread(0x9, ",{\"name\":\"reject\",\"index\":90,\"fields\":[{\"name\":\"deliveryTag\",\"domain\":\"longlong\"},{\"name\":\"requeue\",\"domain\":\"bit\"}]},{\"name\":\"recover\",\"index\":100,\"fields\":[{\"name\":\"requeue\",\"domain\":\"bit\"}]}]},{\"name\":\"file\",\"index\":70,\"fields\":[{\"name\":\"contentType\",\"d", 0x1000, 0x2000)		 = 4096 0
pread(0x9, "liver\",\"index\":60,\"fields\":[{\"name\":\"consumerTag\",\"domain\":\"shortstr\"},{\"name\":\"deliveryTag\",\"domain\":\"longlong\"},{\"name\":\"exchange\",\"domain\":\"shortstr\"},{\"name\":\"queue\",\"domain\":\"shortstr\"}]}]},{\"name\":\"tx\",\"index\":90,\"fields\":[],\"methods\":[{\"name\":\"selec", 0x1000, 0x3000)		 = 2086 0
pread(0x9, "liver\",\"index\":60,\"fields\":[{\"name\":\"consumerTag\",\"domain\":\"shortstr\"},{\"name\":\"deliveryTag\",\"domain\":\"longlong\"},{\"name\":\"exchange\",\"domain\":\"shortstr\"},{\"name\":\"queue\",\"domain\":\"shortstr\"}]}]},{\"name\":\"tx\",\"index\":90,\"fields\":[],\"methods\":[{\"name\":\"selec", 0x1000, 0x3826)		 = 0 0
close(0x9)		 = 0 0
madvise(0x1006CC000, 0x21000, 0x9)		 = 0 0
stat64("/Users/ryan/projects/node-amqp/promise.js\0", 0x7FFF5FBFE260, 0x100940151)		 = 0 0
open("/Users/ryan/projects/node-amqp/promise.js\0", 0x0, 0x1B6)		 = 9 0
read(0x9, "var events = require('events');\nvar inherits = require('sys').inherits;\n\nexports.Promise = function () {\n  events.EventEmitter.call(this);\n  this._blocking = false;\n  this.hasFired = false;\n  this._values = undefined;\n};\ninherits(exports.Promise, events.Ev", 0x1000)		 = 2038 0
pread(0x9, "var events = require('events');\nvar inherits = require('sys').inherits;\n\nexports.Promise = function () {\n  events.EventEmitter.call(this);\n  this._blocking = false;\n  this.hasFired = false;\n  this._values = undefined;\n};\ninherits(exports.Promise, events.Ev", 0x1000, 0x7F6)		 = 0 0
close(0x9)		 = 0 0
open_nocancel("/etc/hosts\0", 0x0, 0x1B6)		 = 9 0
fstat64(0x9, 0x7FFF5FBFE230, 0x7FFF5FBFE2FC)		 = 0 0
read_nocancel(0x9, "##\n# Host Database\n#\n# localhost is used to configure the loopback interface\n# when the system is booting.  Do not change this entry.\n##\n127.0.0.1\tlocalhost\n255.255.255.255\tbroadcasthost\n::1             localhost \nfe80::1%lo0\tlocalhost\nme\":\"prefetchCount\",", 0x1000)		 = 236 0
close_nocancel(0x9)		 = 0 0
socket(0x2, 0x1, 0x0)		 = 9 0
fcntl(0x9, 0x4, 0x4)		 = 0 0
fcntl(0x9, 0x2, 0x1)		 = 0 0
connect(0x9, 0x100381F00, 0x10)		 = -1 Err#36
select(0x20, 0x100700A70, 0x100700380, 0x0, 0x7FFF5FBFE800)		 = 1 0
getsockopt(0x9, 0xFFFF, 0x1007)		 = 0 0
write(0x9, "AMQP\001\001\b\0", 0x8)		 = 8 0
select(0x20, 0x100700A70, 0x100700380, 0x0, 0x7FFF5FBFE800)		 = 1 0
select(0x20, 0x100700A70, 0x100700380, 0x0, 0x7FFF5FBFE800)		 = 0 0
select(0x20, 0x100700A70, 0x100700380, 0x0, 0x7FFF5FBFE800)		 = 1 0
read(0x9, "\001\0", 0xA000)		 = 298 0
write(0x9, "\001\0", 0x94)		 = 148 0
select(0x20, 0x100700A70, 0x100700380, 0x0, 0x7FFF5FBFE800)		 = 1 0
read(0x9, "\001\0", 0x9ED6)		 = 20 0
mmap(0x0, 0x20000, 0x3, 0x1002, 0x3000000, 0x7FFF00000000)		 = 0xC22000 0
write(0x9, "\001\0", 0x14)		 = 20 0
mmap(0x0, 0x20000, 0x3, 0x1002, 0x3000000, 0x7FFF00000000)		 = 0xC42000 0
write(0x9, "\001\0", 0x10)		 = 16 0
thread_selfid(0x7FFF707C3600, 0x0, 0xFFFFFFFF)		 = 1024895 0
write(0x1, "got ready event\n@\246\241\001\027\021\211\aC\"\211\027\337\016e\r1\037l\344\244\321\305a\200)(7\310\322%\313\270\373\225]\267\b\031ot\320\257;TMz$Aaz\223\374\023\333\220z|\246\204^\242\364Q\"\266\356\301l\234\365\311R\025\231X\3320l8\374\037FT\276\241\203d\366A\247\246\376\250\030vd\215\257:\313\300\f\262\2736\250\336\227oIQ\300\b\361\3654\372\351[[j+\321D\210X`\260\006 \361\266E\035\307\360\356\003\306\341u\204\235\336\331\256\373\273?i\321&\366\001\310\252\315.p%\353\027\206\360%\217\202\263|\301&CrU\212\210\313\252\2213\020E#H\351v\b\203\203\353\016\301x]k\"\n\f\312\342Q\253\032o\201\273\nW\271\037\\\330\322\032\312@\375L\357L\n\241Z\310\231\245\250\250\314\0", 0x10)		 = 16 0
write(0x6, "\0", 0x1)		 = 1 0
madvise(0x7FFF8925F000, 0x2000, 0x5)		 = 0 0
madvise(0x100614000, 0x2000, 0x5)		 = 0 0
open("/dev/dtracehelper\0", 0x2, 0x7FFF5FC454A8)		 = 4 0
mmap(0x0, 0x28000, 0x3, 0x1002, 0x3000000, 0x22800900000000)		 = 0x6A3000 0
mmap(0x0, 0x1000, 0x3, 0x1002, 0x3000000, 0x22800900000000)		 = 0x6CB000 0
mmap(0x0, 0x1000000, 0x3, 0x1002, 0x2000000, 0x22800900000000)		 = 0x900000 0
munmap(0x100900000, 0x700000)		 = 0 0
munmap(0x101800000, 0x100000)		 = 0 0
sigaction(0xD, 0x7FFF5FBFEED0, 0x0)		 = 0 0
getuid(0x0, 0x7FFF5FBFEED0, 0x0)		 = 502 0
geteuid(0x0, 0x7FFF5FBFEED0, 0x0)		 = 0 0
pipe(0x100382190, 0x7FFFFFE00050, 0x0)		 = 4 0
fcntl(0x4, 0x2, 0x1)		 = 0 0
fcntl(0x4, 0x4, 0x4)		 = 0 0
fcntl(0x6, 0x2, 0x1)		 = 0 0
fcntl(0x6, 0x4, 0x4)		 = 0 0
sigaction(0x14, 0x7FFF5FBFEE90, 0x0)		 = 0 0
sigprocmask(0x2, 0x7FFF5FBFEEC8, 0x0)		 = 0x0 0
mmap(0x0, 0x4000000, 0x0, 0x1042, 0xFF000000, 0x100000001)		 = 0x1800000 0
mmap(0x102000000, 0x100000, 0x3, 0x1012, 0xFF000000, 0x100000001)		 = 0x2000000 0
mmap(0x103000000, 0x100000, 0x3, 0x1012, 0xFF000000, 0x100000001)		 = 0x3000000 0
__sysctl(0x7FFF5FBFEC70, 0x2, 0x7FFF707D1658)		 = 0 0
mmap(0x0, 0x40000, 0x3, 0x1002, 0xFF000000, 0x100000001)		 = 0x900000 0
mmap(0x0, 0x40000, 0x3, 0x1002, 0xFF000000, 0x100000001)		 = 0x940000 0
mmap(0x0, 0x20000000, 0x0, 0x1042, 0xFF000000, 0x100000001)		 = 0x5800000 0
mmap(0x105800000, 0x40000, 0x7, 0x1012, 0xFF000000, 0x100000001)		 = 0x5800000 0
mmap(0x0, 0x81000, 0x3, 0x1002, 0x3000000, 0x100000001)		 = 0x980000 0
mmap(0x0, 0x40000, 0x3, 0x1002, 0xFF000000, 0x100000001)		 = 0xA01000 0
mmap(0x0, 0x40000, 0x3, 0x1002, 0xFF000000, 0x100000001)		 = 0xA41000 0
mmap(0x0, 0x43000, 0x3, 0x1002, 0xFF000000, 0x100000001)		 = 0xA81000 0
select(0x20, 0x100700A70, 0x100700380, 0x0, 0x7FFF5FBFE800)		 = 1 0
read(0x9, "\001\0", 0x9EC2)		 = 21 0
ioctl(0x1, 0x4004667A, 0x7FFF5FBFD6BC)		 = -1 Err#25
ioctl(0x1, 0x40487413, 0x7FFF5FBFD6C0)		 = -1 Err#25
ioctl(0x1, 0x4004667A, 0x7FFF5FBFD74C)		 = -1 Err#25
ioctl(0x1, 0x40487413, 0x7FFF5FBFD750)		 = -1 Err#25
__pthread_sigmask(0x3, 0x7FFF5FBFDABC, 0x7FFF5FBFDAB8)		 = 0 0
bsdthread_create(0x1000353C0, 0x100714730, 0x10000)		 = 13053952 0
__pthread_sigmask(0x3, 0x7FFF5FBFDAB8, 0x0)		 = 0 0
select(0x20, 0x100700A70, 0x100700380, 0x0, 0x7FFF5FBFE800)		 = 1 0
mmap(0x0, 0x200000, 0x3, 0x1002, 0x7000000, 0x1FFFFFFFF)		 = 0xC75000 0
munmap(0x100C75000, 0x8B000)		 = 0 0
munmap(0x100E00000, 0x75000)		 = 0 0
read(0x4, "\0", 0x1)		 = 1 0
write(0x6, "\031\0", 0x1)		 = 1 0
select(0x20, 0x100700A70, 0x100700380, 0x0, 0x7FFF5FBFE800)		 = 1 0
read(0x4, "\031\0", 0x1)		 = 1 0
select(0x20, 0x100700A70, 0x100700380, 0x0, 0x7FFF5FBFE800)		 = 0 0
select(0x20, 0x100700A70, 0x100700380, 0x0, 0x7FFF5FBFE800)		 = 0 0
select(0x20, 0x100700A70, 0x100700380, 0x0, 0x7FFF5FBFE800)		 = 0 0
mmap(0x102000000, 0x100000, 0x0, 0x1052, 0xFF000000, 0x22800907E94B7C)		 = 0x2000000 0
select(0x20, 0x100700A70, 0x100700380, 0x0, 0x7FFF5FBFE800)		 = 0 0
select(0x20, 0x100700A70, 0x100700380, 0x0, 0x7FFF5FBFE800)		 = 0 0
select(0x20, 0x100700A70, 0x100700380, 0x0, 0x7FFF5FBFE800)		 = 0 0
mmap(0x102000000, 0x100000, 0x3, 0x1012, 0xFF000000, 0x22800907E94B7C)		 = 0x2000000 0
mmap(0x0, 0x9000, 0x3, 0x1002, 0xFF000000, 0x22800907E94B7C)		 = 0xC75000 0
mmap(0x0, 0x9000, 0x3, 0x1002, 0xFF000000, 0x22800907E94B7C)		 = 0xC7E000 0
mmap(0x0, 0xC000, 0x3, 0x1002, 0xFF000000, 0x22800907E94B7C)		 = 0xC87000 0
mmap(0x0, 0xA000, 0x3, 0x1002, 0xFF000000, 0x22800907E94B7C)		 = 0xC93000 0
mmap(0x0, 0x4000, 0x3, 0x1002, 0xFF000000, 0x22800907E94B7C)		 = 0xC9D000 0
mmap(0x0, 0x4000, 0x3, 0x1002, 0xFF000000, 0x22800907E94B7C)		 = 0xCA1000 0
mmap(0x0, 0x4000, 0x3, 0x1002, 0xFF000000, 0x22800907E94B7C)		 = 0xCA5000 0
mmap(0x0, 0x4000, 0x3, 0x1002, 0xFF000000, 0x22800907E94B7C)		 = 0xCA9000 0
mmap(0x0, 0x8000, 0x3, 0x1002, 0xFF000000, 0x22800907E94B7C)		 = 0xCAD000 0
mmap(0x0, 0x5000, 0x3, 0x1002, 0xFF000000, 0x22800907E94B7C)		 = 0xCB5000 0
mmap(0x0, 0x5000, 0x3, 0x1002, 0xFF000000, 0x22800907E94B7C)		 = 0xCBA000 0
madvise(0x100C42000, 0x20000, 0x9)		 = 0 0
madvise(0x100C22000, 0x20000, 0x9)		 = 0 0
madvise(0x1006CC000, 0x21000, 0x9)		 = 0 0
mmap(0x103000000, 0x100000, 0x0, 0x1052, 0xFF000000, 0x100000001)		 = 0x3000000 0
select(0x20, 0x100700A70, 0x100700380, 0x0, 0x7FFF5FBFE800)		 = 0 0
select(0x20, 0x100700A70, 0x100700380, 0x0, 0x7FFF5FBFE800)		 = 0 0
select(0x20, 0x100700A70, 0x100700380, 0x0, 0x7FFF5FBFE800)		 = 0 0
mmap(0x103000000, 0x100000, 0x3, 0x1012, 0xFF000000, 0x100000001)		 = 0x3000000 0
munmap(0x100CB5000, 0x5000)		 = 0 0
mmap(0x102100000, 0x100000, 0x3, 0x1012, 0xFF000000, 0x100000001)		 = 0x2100000 0
mmap(0x103100000, 0x100000, 0x3, 0x1012, 0xFF000000, 0x100000001)		 = 0x3100000 0
mmap(0x103100000, 0x100000, 0x0, 0x1052, 0xFF000000, 0x100000001)		 = 0x3100000 0
mmap(0x102100000, 0x100000, 0x0, 0x1052, 0xFF000000, 0x100000001)		 = 0x2100000 0
mmap(0x102000000, 0x100000, 0x0, 0x1052, 0xFF000000, 0x100000001)		 = 0x2000000 0
select(0x20, 0x100700A70, 0x100700380, 0x0, 0x7FFF5FBFE800)		 = 0 0
mmap(0x102000000, 0x100000, 0x3, 0x1012, 0xFF000000, 0x100000001)		 = 0x2000000 0
mmap(0x103000000, 0x100000, 0x0, 0x1052, 0xFF000000, 0x100000001)		 = 0x3000000 0
select(0x20, 0x100700A70, 0x100700380, 0x0, 0x7FFF5FBFE800)		 = 1 0
read(0x9, "/dev/dtracehelper\0", 0x9EAD)		 = 0 0
close(0x1)		 = 0 0
__semwait_signal(0x1503, 0x1603, 0x1)		 = -1 Err#4

