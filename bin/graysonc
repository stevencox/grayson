#!/usr/bin/env python

import logging
import getopt
import json
import os
import sys
import string
import traceback
from grayson.compiler.compiler import GraysonCompiler
from grayson.compiler.dynamicmap import DynamicMapOperator
from grayson.compiler.exception import GraysonCompilerException
from grayson.common.util import GraysonUtil

from grayson.cli.cli import Parser

FORMAT = '%(asctime)-15s %(message)s'
logging.basicConfig(format=FORMAT)
logger = logging.getLogger (__name__)
logger.setLevel (logging.DEBUG)

# usage #
def usage ():
    logger.info ("usage: graysonc")
    logger.info ("  -m|--model      a model file to compile")
    logger.info ("  -o|--output     the name of the output DAX file")
    logger.info ("  -n|--namespace  the namespace of the application")
    logger.info ("  -v|--version    application version")
    logger.info ("  -s|--sites      sites to execute at. valid only with --execute")
    logger.info ("  -l|--loglevel   set logger level to [debug|info|warning|info|critical]")
    logger.info ("  -p|--define     define a model property. eg: --define='name=value'")
    logger.info ("  -d|--directory  output directory for generated artifacts")
    logger.info ("  -e|--execute    execute the workflow")
    logger.info ("  --modelpath     list of paths on which to search for models")
    logger.info ("  --package       package all referenced models into an archive")
    logger.info ("  --package-file  package a specific file")
    logger.info ("  -h|--help       show this message")

# main #
def main (argv):
    models = []
    logLevel = "error"
    output = sys.stdout
    verbose = False
    namespace = "app"
    version = "1.0"
    sites = "local"
    execute = False
    outputDirectory = "."
    inputModelProperties = {}
    modelPath = None
    package = False
    packagingAdditionalFiles = []
    appHome = None

    cliModel = None

    configuration = {}

    try:
        opts, args = getopt.getopt ( argv, "m:o:n:r:l:p:d:eshtc",
                                     [ "model=",
                                       "output=", 
                                       "namespace=",
                                       "version=",
                                       "loglevel=",
                                       "define=",
                                       "directory=",
                                       "modelpath=",
                                       "apphome=",
                                       "package",
                                       "package-file=",
                                       "sites=",
                                       
                                       "configuration=",

                                       "cli=",

                                       "execute",
                                       "help"
                                       ] )
        for opt, arg in opts:
            if opt in ("-m", "--model"):
                models.append (arg)
            elif opt in ("-o", "--output"):
                output = arg
            elif opt in ("-n", "--namespace"):
                namespace = arg
            elif opt in ("-r", "--version"):
                version = arg
            elif opt in ("-v", "--verbose"):
                verbose = True
            elif opt in ("-s", "--sites"):
                sites = arg

            elif opt in ("--configuration"):
                logger.debug ("configuration: %s", arg)
                text = GraysonUtil.readFile (arg)
                configuration = json.loads (text)


            elif opt in ("-l", "--loglevel"):
                logLevel = arg
            elif opt in ("-p", "--define"):
                (key, value) = string.split (arg, "=")
                inputModelProperties [key] = value
            elif opt in ("-d", "--directory"):
                outputDirectory = arg
            elif opt in ("--modelpath"):
                modelPath = arg.split (os.pathsep)
            elif opt in ("--apphome"):
                appHome = arg
            elif opt in ("--package"):
                package = True
            elif opt in ("--package-file"):
                packagingAdditionalFiles.append (arg)
            elif opt in ("-e", "--execute"):
                execute = True

            elif opt in ("--cli"):
                cliModel = arg

            elif opt in ("-h", "--help"):
                usage ()
                sys.exit ()
            else:
                usage ()
                sys.exit ()

        if execute and output == sys.stdout:
            raise ValueError ("--execute is valid only when --output is also specified")        

        if configuration:
            dynamicMap = DynamicMapOperator ()
            dynamicMap.execute (configuration)
        elif cliModel:
            Parser.set_log_level (logLevel)
            Parser.parse (cliModel)
        elif len(models) == 0:
            usage ()
            sys.exit ()
        else:
            try:
                GraysonCompiler.compile (models=models,
                                         output=output,
                                         modelPath=modelPath,
                                         namespace=namespace,
                                         version=version,
                                         logLevel=logLevel,
                                         appHome=appHome,
                                         outputdir=outputDirectory,
                                         modelProperties=inputModelProperties,
                                         execute=execute,
                                         sites=sites,
                                         packaging=package,
                                         packagingAdditionalFiles=packagingAdditionalFiles)

            except GraysonCompilerException as e:
                logger.error (str (e.__str__ ()))
                return 1

    except getopt.GetoptError as ex:
        traceback.print_stack ()
        traceback.print_exc (ex)
        usage ()
        formatted_lines = traceback.format_exc().splitlines()
        logger.error (formatted_lines [-1])

# main
if __name__ == "__main__":
    main (sys.argv[1:])



