/**
==============================================================================================
== 
==============================================================================================
*/
function message (obj){
    var el = document.createElement('p');
    if ('announcement' in obj) el.innerHTML = '<em>' + esc(obj.announcement) + '</em>';
    else if ('message' in obj) el.innerHTML = '<b>' + esc(obj.message[0]) + ':</b> ' + esc(obj.message[1]);
    
    if( obj.message && window.console && console.log ) console.log(obj.message[0], obj.message[1]);
    document.getElementById('chat').appendChild(el);
    document.getElementById('chat').scrollTop = 1000000;
}

function send(){
    var val = document.getElementById('text').value;
    socket.send(val);
    message({ message: ['you', val] });
    document.getElementById('text').value = '';
}

function esc(msg){
    return msg.replace(/</g, '&lt;').replace(/>/g, '&gt;');
};

var socket = new io.Socket(null, {port: 8080, rememberTransport: false});
socket.connect();
socket.on('message', function(obj){
        if ('buffer' in obj){
	    document.getElementById('form').style.display='block';
	    document.getElementById('chat').innerHTML = '';
	    
	    for (var i in obj.buffer) message(obj.buffer[i]);
        } else message(obj);
    });

socket.on('connect', function(){ message({ message: ['System', 'Connected']})});
socket.on('disconnect', function(){ message({ message: ['System', 'Disconnected']})});
socket.on('reconnect', function(){ message({ message: ['System', 'Reconnected to server']})});
socket.on('reconnecting', function( nextRetry ){ message({ message: ['System', 'Attempting to re-connect to the server, next attempt in ' + nextRetry + 'ms']})});
socket.on('reconnect_failed', function(){ message({ message: ['System', 'Reconnected to server FAILED.']})});


